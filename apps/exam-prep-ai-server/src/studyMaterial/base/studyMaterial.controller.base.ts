/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudyMaterialService } from "../studyMaterial.service";
import { StudyMaterialCreateInput } from "./StudyMaterialCreateInput";
import { StudyMaterial } from "./StudyMaterial";
import { StudyMaterialFindManyArgs } from "./StudyMaterialFindManyArgs";
import { StudyMaterialWhereUniqueInput } from "./StudyMaterialWhereUniqueInput";
import { StudyMaterialUpdateInput } from "./StudyMaterialUpdateInput";

export class StudyMaterialControllerBase {
  constructor(protected readonly service: StudyMaterialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudyMaterial })
  async createStudyMaterial(
    @common.Body() data: StudyMaterialCreateInput
  ): Promise<StudyMaterial> {
    return await this.service.createStudyMaterial({
      data: data,
      select: {
        content: true,
        createdAt: true,
        gradeLevel: true,
        id: true,
        subject: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudyMaterial] })
  @ApiNestedQuery(StudyMaterialFindManyArgs)
  async studyMaterials(
    @common.Req() request: Request
  ): Promise<StudyMaterial[]> {
    const args = plainToClass(StudyMaterialFindManyArgs, request.query);
    return this.service.studyMaterials({
      ...args,
      select: {
        content: true,
        createdAt: true,
        gradeLevel: true,
        id: true,
        subject: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudyMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studyMaterial(
    @common.Param() params: StudyMaterialWhereUniqueInput
  ): Promise<StudyMaterial | null> {
    const result = await this.service.studyMaterial({
      where: params,
      select: {
        content: true,
        createdAt: true,
        gradeLevel: true,
        id: true,
        subject: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudyMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudyMaterial(
    @common.Param() params: StudyMaterialWhereUniqueInput,
    @common.Body() data: StudyMaterialUpdateInput
  ): Promise<StudyMaterial | null> {
    try {
      return await this.service.updateStudyMaterial({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          gradeLevel: true,
          id: true,
          subject: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudyMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudyMaterial(
    @common.Param() params: StudyMaterialWhereUniqueInput
  ): Promise<StudyMaterial | null> {
    try {
      return await this.service.deleteStudyMaterial({
        where: params,
        select: {
          content: true,
          createdAt: true,
          gradeLevel: true,
          id: true,
          subject: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
