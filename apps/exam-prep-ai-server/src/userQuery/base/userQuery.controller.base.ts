/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserQueryService } from "../userQuery.service";
import { UserQueryCreateInput } from "./UserQueryCreateInput";
import { UserQuery } from "./UserQuery";
import { UserQueryFindManyArgs } from "./UserQueryFindManyArgs";
import { UserQueryWhereUniqueInput } from "./UserQueryWhereUniqueInput";
import { UserQueryUpdateInput } from "./UserQueryUpdateInput";

export class UserQueryControllerBase {
  constructor(protected readonly service: UserQueryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserQuery })
  async createUserQuery(
    @common.Body() data: UserQueryCreateInput
  ): Promise<UserQuery> {
    return await this.service.createUserQuery({
      data: data,
      select: {
        createdAt: true,
        id: true,
        queryText: true,
        queryType: true,
        response: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserQuery] })
  @ApiNestedQuery(UserQueryFindManyArgs)
  async userQueries(@common.Req() request: Request): Promise<UserQuery[]> {
    const args = plainToClass(UserQueryFindManyArgs, request.query);
    return this.service.userQueries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        queryText: true,
        queryType: true,
        response: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserQuery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userQuery(
    @common.Param() params: UserQueryWhereUniqueInput
  ): Promise<UserQuery | null> {
    const result = await this.service.userQuery({
      where: params,
      select: {
        createdAt: true,
        id: true,
        queryText: true,
        queryType: true,
        response: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserQuery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserQuery(
    @common.Param() params: UserQueryWhereUniqueInput,
    @common.Body() data: UserQueryUpdateInput
  ): Promise<UserQuery | null> {
    try {
      return await this.service.updateUserQuery({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          queryText: true,
          queryType: true,
          response: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserQuery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserQuery(
    @common.Param() params: UserQueryWhereUniqueInput
  ): Promise<UserQuery | null> {
    try {
      return await this.service.deleteUserQuery({
        where: params,
        select: {
          createdAt: true,
          id: true,
          queryText: true,
          queryType: true,
          response: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
