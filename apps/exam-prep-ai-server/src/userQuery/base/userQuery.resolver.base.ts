/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserQuery } from "./UserQuery";
import { UserQueryCountArgs } from "./UserQueryCountArgs";
import { UserQueryFindManyArgs } from "./UserQueryFindManyArgs";
import { UserQueryFindUniqueArgs } from "./UserQueryFindUniqueArgs";
import { CreateUserQueryArgs } from "./CreateUserQueryArgs";
import { UpdateUserQueryArgs } from "./UpdateUserQueryArgs";
import { DeleteUserQueryArgs } from "./DeleteUserQueryArgs";
import { UserQueryService } from "../userQuery.service";
@graphql.Resolver(() => UserQuery)
export class UserQueryResolverBase {
  constructor(protected readonly service: UserQueryService) {}

  async _userQueriesMeta(
    @graphql.Args() args: UserQueryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserQuery])
  async userQueries(
    @graphql.Args() args: UserQueryFindManyArgs
  ): Promise<UserQuery[]> {
    return this.service.userQueries(args);
  }

  @graphql.Query(() => UserQuery, { nullable: true })
  async userQuery(
    @graphql.Args() args: UserQueryFindUniqueArgs
  ): Promise<UserQuery | null> {
    const result = await this.service.userQuery(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserQuery)
  async createUserQuery(
    @graphql.Args() args: CreateUserQueryArgs
  ): Promise<UserQuery> {
    return await this.service.createUserQuery({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserQuery)
  async updateUserQuery(
    @graphql.Args() args: UpdateUserQueryArgs
  ): Promise<UserQuery | null> {
    try {
      return await this.service.updateUserQuery({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserQuery)
  async deleteUserQuery(
    @graphql.Args() args: DeleteUserQueryArgs
  ): Promise<UserQuery | null> {
    try {
      return await this.service.deleteUserQuery(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
