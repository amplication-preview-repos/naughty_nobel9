/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProblemSolutionService } from "../problemSolution.service";
import { ProblemSolutionCreateInput } from "./ProblemSolutionCreateInput";
import { ProblemSolution } from "./ProblemSolution";
import { ProblemSolutionFindManyArgs } from "./ProblemSolutionFindManyArgs";
import { ProblemSolutionWhereUniqueInput } from "./ProblemSolutionWhereUniqueInput";
import { ProblemSolutionUpdateInput } from "./ProblemSolutionUpdateInput";

export class ProblemSolutionControllerBase {
  constructor(protected readonly service: ProblemSolutionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProblemSolution })
  async createProblemSolution(
    @common.Body() data: ProblemSolutionCreateInput
  ): Promise<ProblemSolution> {
    return await this.service.createProblemSolution({
      data: data,
      select: {
        createdAt: true,
        gradeLevel: true,
        id: true,
        problemText: true,
        solutionText: true,
        subject: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProblemSolution] })
  @ApiNestedQuery(ProblemSolutionFindManyArgs)
  async problemSolutions(
    @common.Req() request: Request
  ): Promise<ProblemSolution[]> {
    const args = plainToClass(ProblemSolutionFindManyArgs, request.query);
    return this.service.problemSolutions({
      ...args,
      select: {
        createdAt: true,
        gradeLevel: true,
        id: true,
        problemText: true,
        solutionText: true,
        subject: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProblemSolution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async problemSolution(
    @common.Param() params: ProblemSolutionWhereUniqueInput
  ): Promise<ProblemSolution | null> {
    const result = await this.service.problemSolution({
      where: params,
      select: {
        createdAt: true,
        gradeLevel: true,
        id: true,
        problemText: true,
        solutionText: true,
        subject: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProblemSolution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProblemSolution(
    @common.Param() params: ProblemSolutionWhereUniqueInput,
    @common.Body() data: ProblemSolutionUpdateInput
  ): Promise<ProblemSolution | null> {
    try {
      return await this.service.updateProblemSolution({
        where: params,
        data: data,
        select: {
          createdAt: true,
          gradeLevel: true,
          id: true,
          problemText: true,
          solutionText: true,
          subject: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProblemSolution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProblemSolution(
    @common.Param() params: ProblemSolutionWhereUniqueInput
  ): Promise<ProblemSolution | null> {
    try {
      return await this.service.deleteProblemSolution({
        where: params,
        select: {
          createdAt: true,
          gradeLevel: true,
          id: true,
          problemText: true,
          solutionText: true,
          subject: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
