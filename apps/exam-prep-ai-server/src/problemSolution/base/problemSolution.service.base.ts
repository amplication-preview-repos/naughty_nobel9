/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProblemSolution as PrismaProblemSolution,
} from "@prisma/client";

export class ProblemSolutionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProblemSolutionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.problemSolution.count(args);
  }

  async problemSolutions(
    args: Prisma.ProblemSolutionFindManyArgs
  ): Promise<PrismaProblemSolution[]> {
    return this.prisma.problemSolution.findMany(args);
  }
  async problemSolution(
    args: Prisma.ProblemSolutionFindUniqueArgs
  ): Promise<PrismaProblemSolution | null> {
    return this.prisma.problemSolution.findUnique(args);
  }
  async createProblemSolution(
    args: Prisma.ProblemSolutionCreateArgs
  ): Promise<PrismaProblemSolution> {
    return this.prisma.problemSolution.create(args);
  }
  async updateProblemSolution(
    args: Prisma.ProblemSolutionUpdateArgs
  ): Promise<PrismaProblemSolution> {
    return this.prisma.problemSolution.update(args);
  }
  async deleteProblemSolution(
    args: Prisma.ProblemSolutionDeleteArgs
  ): Promise<PrismaProblemSolution> {
    return this.prisma.problemSolution.delete(args);
  }
}
