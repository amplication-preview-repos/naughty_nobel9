/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProblemSolution } from "./ProblemSolution";
import { ProblemSolutionCountArgs } from "./ProblemSolutionCountArgs";
import { ProblemSolutionFindManyArgs } from "./ProblemSolutionFindManyArgs";
import { ProblemSolutionFindUniqueArgs } from "./ProblemSolutionFindUniqueArgs";
import { CreateProblemSolutionArgs } from "./CreateProblemSolutionArgs";
import { UpdateProblemSolutionArgs } from "./UpdateProblemSolutionArgs";
import { DeleteProblemSolutionArgs } from "./DeleteProblemSolutionArgs";
import { ProblemSolutionService } from "../problemSolution.service";
@graphql.Resolver(() => ProblemSolution)
export class ProblemSolutionResolverBase {
  constructor(protected readonly service: ProblemSolutionService) {}

  async _problemSolutionsMeta(
    @graphql.Args() args: ProblemSolutionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProblemSolution])
  async problemSolutions(
    @graphql.Args() args: ProblemSolutionFindManyArgs
  ): Promise<ProblemSolution[]> {
    return this.service.problemSolutions(args);
  }

  @graphql.Query(() => ProblemSolution, { nullable: true })
  async problemSolution(
    @graphql.Args() args: ProblemSolutionFindUniqueArgs
  ): Promise<ProblemSolution | null> {
    const result = await this.service.problemSolution(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProblemSolution)
  async createProblemSolution(
    @graphql.Args() args: CreateProblemSolutionArgs
  ): Promise<ProblemSolution> {
    return await this.service.createProblemSolution({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProblemSolution)
  async updateProblemSolution(
    @graphql.Args() args: UpdateProblemSolutionArgs
  ): Promise<ProblemSolution | null> {
    try {
      return await this.service.updateProblemSolution({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProblemSolution)
  async deleteProblemSolution(
    @graphql.Args() args: DeleteProblemSolutionArgs
  ): Promise<ProblemSolution | null> {
    try {
      return await this.service.deleteProblemSolution(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
